#include <stdio.h>

#include "matrix_mapping.h" 

#include <Arduino.h>
#define ROWS 16
#define COLUMNS 32

struct Value {
    int x;
    int y;
    int value;
};

int LOOKUP_TABLE[ROWS][COLUMNS];

void generate_mapping() {
    // Given values
    struct Value values[ROWS * COLUMNS] = {
      
        {7, 0, 511}, {6, 0, 510}, {5, 0, 509}, {4, 0, 508},
        {3, 0, 507}, {2, 0, 506}, {1, 0, 505}, {0, 0, 504},
        {0, 1, 503}, {1, 1, 502}, {2, 1, 501}, {3, 1, 500},
        {4, 1, 499}, {5, 1, 498}, {6, 1, 497}, {7, 1, 496},
        {7, 2, 495}, {6, 2, 494}, {5, 2, 493}, {4, 2, 492},
        {3, 2, 491}, {2, 2, 490}, {1, 2, 489}, {0, 2, 488},
        {0, 3, 487}, {1, 3, 486}, {2, 3, 485}, {3, 3, 484},
        {4, 3, 483}, {5, 3, 482}, {6, 3, 481}, {7, 3, 480},
        {7, 4, 479}, {6, 4, 478}, {5, 4, 477}, {4, 4, 476},
        {3, 4, 475}, {2, 4, 474}, {1, 4, 473}, {0, 4, 472},
        {0, 5, 471}, {1, 5, 470}, {2, 5, 469}, {3, 5, 468},
        {4, 5, 467}, {5, 5, 466}, {6, 5, 465}, {7, 5, 464},
        {7, 6, 463}, {6, 6, 462}, {5, 6, 461}, {4, 6, 460},
        {3, 6, 459}, {2, 6, 458}, {1, 6, 457}, {0, 6, 456},
        {0, 7, 455}, {1, 7, 454}, {2, 7, 453}, {3, 7, 452},
        {4, 7, 451}, {5, 7, 450}, {6, 7, 449}, {7, 7, 448},
        {7, 8, 447}, {6, 8, 446}, {5, 8, 445}, {4, 8, 444},
        {3, 8, 443}, {2, 8, 442}, {1, 8, 441}, {0, 8, 440},
        {0, 9, 439}, {1, 9, 438}, {2, 9, 437}, {3, 9, 436},
        {4, 9, 435}, {5, 9, 434}, {6, 9, 433}, {7, 9, 432},
        {7, 10, 431}, {6, 10, 430}, {5, 10, 429}, {4, 10, 428},
        {3, 10, 427}, {2, 10, 426}, {1, 10, 425}, {0, 10, 424},
        {0, 11, 423}, {1, 11, 422}, {2, 11, 421}, {3, 11, 420},
        {4, 11, 419}, {5, 11, 418}, {6, 11, 417}, {7, 11, 416},
        {7, 12, 415}, {6, 12, 414}, {5, 12, 413}, {4, 12, 412},
        {3, 12, 411}, {2, 12, 410}, {1, 12, 409}, {0, 12, 408},
        {0, 13, 407}, {1, 13, 406}, {2, 13, 405}, {3, 13, 404},
        {4, 13, 403}, {5, 13, 402}, {6, 13, 401}, {7, 13, 400},
        {7, 14, 399}, {6, 14, 398}, {5, 14, 397}, {4, 14, 396},
        {3, 14, 395}, {2, 14, 394}, {1, 14, 393}, {0, 14, 392},
        {0, 15, 391}, {1, 15, 390}, {2, 15, 389}, {3, 15, 388},
        {4, 15, 387}, {5, 15, 386}, {6, 15, 385}, {7, 15, 384},
        {7, 16, 383}, {6, 16, 382}, {5, 16, 381}, {4, 16, 380},
        {3, 16, 379}, {2, 16, 378}, {1, 16, 377}, {0, 16, 376},
        {0, 17, 375}, {1, 17, 374}, {2, 17, 373}, {3, 17, 372},
        {4, 17, 371}, {5, 17, 370}, {6, 17, 369}, {7, 17, 368},
        {7, 18, 367}, {6, 18, 366}, {5, 18, 365}, {4, 18, 364},
        {3, 18, 363}, {2, 18, 362}, {1, 18, 361}, {0, 18, 360},
        {0, 19, 359}, {1, 19, 358}, {2, 19, 357}, {3, 19, 356},
        {4, 19, 355}, {5, 19, 354}, {6, 19, 353}, {7, 19, 352},
        {7, 20, 351}, {6, 20, 350}, {5, 20, 349}, {4, 20, 348},
        {3, 20, 347}, {2, 20, 346}, {1, 20, 345}, {0, 20, 344},
        {0, 21, 343}, {1, 21, 342}, {2, 21, 341}, {3, 21, 340},
        {4, 21, 339}, {5, 21, 338}, {6, 21, 337}, {7, 21, 336},
        {7, 22, 335}, {6, 22, 334}, {5, 22, 333}, {4, 22, 332},
        {3, 22, 331}, {2, 22, 330}, {1, 22, 329}, {0, 22, 328},
        {0, 23, 327}, {1, 23, 326}, {2, 23, 325}, {3, 23, 324},
        {4, 23, 323}, {5, 23, 322}, {6, 23, 321}, {7, 23, 320},
        {7, 24, 319}, {6, 24, 318}, {5, 24, 317}, {4, 24, 316},
        {3, 24, 315}, {2, 24, 314}, {1, 24, 313}, {0, 24, 312},
        {0, 25, 311}, {1, 25, 310}, {2, 25, 309}, {3, 25, 308},
        {4, 25, 307}, {5, 25, 306}, {6, 25, 305}, {7, 25, 304},
        {7, 26, 303}, {6, 26, 302}, {5, 26, 301}, {4, 26, 300},
        {3, 26, 299}, {2, 26, 298}, {1, 26, 297}, {0, 26, 296},
        {0, 27, 295}, {1, 27, 294}, {2, 27, 293}, {3, 27, 292},
        {4, 27, 291}, {5, 27, 290}, {6, 27, 289}, {7, 27, 288},
        {7, 28, 287}, {6, 28, 286}, {5, 28, 285}, {4, 28, 284},
        {3, 28, 283}, {2, 28, 282}, {1, 28, 281}, {0, 28, 280},
        {0, 29, 279}, {1, 29, 278}, {2, 29, 277}, {3, 29, 276},
        {4, 29, 275}, {5, 29, 274}, {6, 29, 273}, {7, 29, 272},
        {7, 30, 271}, {6, 30, 270}, {5, 30, 269}, {4, 30, 268},
        {3, 30, 267}, {2, 30, 266}, {1, 30, 265}, {0, 30, 264},
        {0, 31, 263}, {1, 31, 262}, {2, 31, 261}, {3, 31, 260},
        {4, 31, 259}, {5, 31, 258}, {6, 31, 257}, {7, 31, 256},
        {8, 31, 255}, {9, 31, 254}, {10, 31, 253}, {11, 31, 252},
        {12, 31, 251}, {13, 31, 250}, {14, 31, 249}, {15, 31, 248},
        {15, 30, 247}, {14, 30, 246}, {13, 30, 245}, {12, 30, 244},
        {11, 30, 243}, {10, 30, 242}, {9, 30, 241}, {8, 30, 240},
        {8, 29, 239}, {9, 29, 238}, {10, 29, 237}, {11, 29, 236},
        {12, 29, 235}, {13, 29, 234}, {14, 29, 233}, {15, 29, 232},
        {15, 28, 231}, {14, 28, 230}, {13, 28, 229}, {12, 28, 228},
        {11, 28, 227}, {10, 28, 226}, {9, 28, 225}, {8, 28, 224},
        {8, 27, 223}, {9, 27, 222}, {10, 27, 221}, {11, 27, 220},
        {12, 27, 219}, {13, 27, 218}, {14, 27, 217}, {15, 27, 216},
        {15, 26, 215}, {14, 26, 214}, {13, 26, 213}, {12, 26, 212},
        {11, 26, 211}, {10, 26, 210}, {9, 26, 209}, {8, 26, 208},
        {8, 25, 207}, {9, 25, 206}, {10, 25, 205}, {11, 25, 204},
        {12, 25, 203}, {13, 25, 202}, {14, 25, 201}, {15, 25, 200},
        {15, 24, 199}, {14, 24, 198}, {13, 24, 197}, {12, 24, 196},
        {11, 24, 195}, {10, 24, 194}, {9, 24, 193}, {8, 24, 192},
        {8, 23, 191}, {9, 23, 190}, {10, 23, 189}, {11, 23, 188},
        {12, 23, 187}, {13, 23, 186}, {14, 23, 185}, {15, 23, 184},
        {15, 22, 183}, {14, 22, 182}, {13, 22, 181}, {12, 22, 180},
        {11, 22, 179}, {10, 22, 178}, {9, 22, 177}, {8, 22, 176},
        {8, 21, 175}, {9, 21, 174}, {10, 21, 173}, {11, 21, 172},
        {12, 21, 171}, {13, 21, 170}, {14, 21, 169}, {15, 21, 168},
        {15, 20, 167}, {14, 20, 166}, {13, 20, 165}, {12, 20, 164},
        {11, 20, 163}, {10, 20, 162}, {9, 20, 161}, {8, 20, 160},
        {8, 19, 159}, {9, 19, 158}, {10, 19, 157}, {11, 19, 156},
        {12, 19, 155}, {13, 19, 154}, {14, 19, 153}, {15, 19, 152},
        {15, 18, 151}, {14, 18, 150}, {13, 18, 149}, {12, 18, 148},
        {11, 18, 147}, {10, 18, 146}, {9, 18, 145}, {8, 18, 144},
        {8, 17, 143}, {9, 17, 142}, {10, 17, 141}, {11, 17, 140},
        {12, 17, 139}, {13, 17, 138}, {14, 17, 137}, {15, 17, 136},
        {15, 16, 135}, {14, 16, 134}, {13, 16, 133}, {12, 16, 132},
        {11, 16, 131}, {10, 16, 130}, {9, 16, 129}, {8, 16, 128},
        {8, 15, 127}, {9, 15, 126}, {10, 15, 125}, {11, 15, 124},
        {12, 15, 123}, {13, 15, 122}, {14, 15, 121}, {15, 15, 120},
        {15, 14, 119}, {14, 14, 118}, {13, 14, 117}, {12, 14, 116},
        {11, 14, 115}, {10, 14, 114}, {9, 14, 113}, {8, 14, 112},
        {8, 13, 111}, {9, 13, 110}, {10, 13, 109}, {11, 13, 108},
        {12, 13, 107}, {13, 13, 106}, {14, 13, 105}, {15, 13, 104},
        {15, 12, 103}, {14, 12, 102}, {13, 12, 101}, {12, 12, 100},
        {11, 12, 99}, {10, 12, 98}, {9, 12, 97}, {8, 12, 96},
        {8, 11, 95}, {9, 11, 94}, {10, 11, 93}, {11, 11, 92},
        {12, 11, 91}, {13, 11, 90}, {14, 11, 89}, {15, 11, 88},
        {15, 10, 87}, {14, 10, 86}, {13, 10, 85}, {12, 10, 84},
        {11, 10, 83}, {10, 10, 82}, {9, 10, 81}, {8, 10, 80},
        {8, 9, 79}, {9, 9, 78}, {10, 9, 77}, {11, 9, 76},
        {12, 9, 75}, {13, 9, 74}, {14, 9, 73}, {15, 9, 72},
        {15, 8, 71}, {14, 8, 70}, {13, 8, 69}, {12, 8, 68},
        {11, 8, 67}, {10, 8, 66}, {9, 8, 65}, {8, 8, 64},
        {8, 7, 63}, {9, 7, 62}, {10, 7, 61}, {11, 7, 60},
        {12, 7, 59}, {13, 7, 58}, {14, 7, 57}, {15, 7, 56},
        {15, 6, 55}, {14, 6, 54}, {13, 6, 53}, {12, 6, 52},
        {11, 6, 51}, {10, 6, 50}, {9, 6, 49}, {8, 6, 48},
        {8, 5, 47}, {9, 5, 46}, {10, 5, 45}, {11, 5, 44},
        {12, 5, 43}, {13, 5, 42}, {14, 5, 41}, {15, 5, 40},
        {15, 4, 39}, {14, 4, 38}, {13, 4, 37}, {12, 4, 36},
        {11, 4, 35}, {10, 4, 34}, {9, 4, 33}, {8, 4, 32},
        {8, 3, 31}, {9, 3, 30}, {10, 3, 29}, {11, 3, 28},
        {12, 3, 27}, {13, 3, 26}, {14, 3, 25}, {15, 3, 24},
        {15, 2, 23}, {14, 2, 22}, {13, 2, 21}, {12, 2, 20},
        {11, 2, 19}, {10, 2, 18}, {9, 2, 17}, {8, 2, 16},
        {8, 1, 15}, {9, 1, 14}, {10, 1, 13}, {11, 1, 12},
        {12, 1, 11}, {13, 1, 10}, {14, 1, 9}, {15, 1, 8},
        {15, 0, 7}, {14, 0, 6}, {13, 0, 5}, {12, 0, 4},
        {11, 0, 3}, {10, 0, 2}, {9, 0, 1}, {8, 0, 0}
    };

  //  Serial.printf("FIRST %d %d %d \n", values[7].x,values[7].y,values[7].value);

    // Copy values to the lookup table
    for (int i = 0; i < ROWS*COLUMNS; i++) {
            LOOKUP_TABLE[values[i].x][values[i].y] = values[i].value;
        }
    
 
}

void print_mapping()
{
     for (int i = 0; i < ROWS; i++) {
        for (int j = 0; j < COLUMNS; j++) {
            printf("%d, ", LOOKUP_TABLE[i][j]);
        }
        printf("\n");
    }

}

int lookup(int x,int y)
{
  return LOOKUP_TABLE[x][y];
}
